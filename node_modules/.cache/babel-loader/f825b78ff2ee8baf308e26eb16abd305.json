{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport { setUserData } from './userSlice';\nexport const submitLogin = ({\n  email,\n  password\n}) => async dispatch => {\n  return jwtService.signInWithEmailAndPassword(email, password).then(user => {\n    dispatch(setUserData(user));\n    return dispatch(loginSuccess());\n  }).catch(errors => {\n    return dispatch(loginError(errors));\n  });\n};\nexport const submitLoginWithFireBase = ({\n  email,\n  password\n}) => async dispatch => {\n  if (!firebaseService.auth) {\n    console.warn(\"Firebase Service didn't initialize, check your configuration\");\n    return () => false;\n  }\n\n  return firebaseService.auth.signInWithEmailAndPassword(email, password).then(() => {\n    return dispatch(loginSuccess());\n  }).catch(error => {\n    const emailErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email', 'auth/operation-not-allowed', 'auth/user-not-found', 'auth/user-disabled'];\n    const passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n    const response = [];\n\n    if (emailErrorCodes.includes(error.code)) {\n      response.push({\n        type: 'email',\n        message: error.message\n      });\n    }\n\n    if (passwordErrorCodes.includes(error.code)) {\n      response.push({\n        type: 'password',\n        message: error.message\n      });\n    }\n\n    if (error.code === 'auth/invalid-api-key') {\n      dispatch(showMessage({\n        message: error.message\n      }));\n    }\n\n    return dispatch(loginError(response));\n  });\n};\nconst initialState = {\n  success: false,\n  errors: []\n};\nconst loginSlice = createSlice({\n  name: 'auth/login',\n  initialState,\n  reducers: {\n    loginSuccess: (state, action) => {\n      state.success = true;\n      state.errors = [];\n    },\n    loginError: (state, action) => {\n      state.success = false;\n      state.errors = action.payload;\n    }\n  },\n  extraReducers: {}\n});\nexport const {\n  loginSuccess,\n  loginError\n} = loginSlice.actions;\nexport default loginSlice.reducer;","map":{"version":3,"sources":["/Users/mozcan/Desktop/UK/gasbroker-front-end/src/app/auth/store/loginSlice.js"],"names":["createSlice","showMessage","firebaseService","jwtService","setUserData","submitLogin","email","password","dispatch","signInWithEmailAndPassword","then","user","loginSuccess","catch","errors","loginError","submitLoginWithFireBase","auth","console","warn","error","emailErrorCodes","passwordErrorCodes","response","includes","code","push","type","message","initialState","success","loginSlice","name","reducers","state","action","payload","extraReducers","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport { setUserData } from './userSlice';\n\nexport const submitLogin = ({ email, password }) => async dispatch => {\n\treturn jwtService\n\t\t.signInWithEmailAndPassword(email, password)\n\t\t.then(user => {\n\t\t\tdispatch(setUserData(user));\n\n\t\t\treturn dispatch(loginSuccess());\n\t\t})\n\t\t.catch(errors => {\n\t\t\treturn dispatch(loginError(errors));\n\t\t});\n};\n\nexport const submitLoginWithFireBase = ({ email, password }) => async dispatch => {\n\tif (!firebaseService.auth) {\n\t\tconsole.warn(\"Firebase Service didn't initialize, check your configuration\");\n\n\t\treturn () => false;\n\t}\n\treturn firebaseService.auth\n\t\t.signInWithEmailAndPassword(email, password)\n\t\t.then(() => {\n\t\t\treturn dispatch(loginSuccess());\n\t\t})\n\t\t.catch(error => {\n\t\t\tconst emailErrorCodes = [\n\t\t\t\t'auth/email-already-in-use',\n\t\t\t\t'auth/invalid-email',\n\t\t\t\t'auth/operation-not-allowed',\n\t\t\t\t'auth/user-not-found',\n\t\t\t\t'auth/user-disabled'\n\t\t\t];\n\t\t\tconst passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n\t\t\tconst response = [];\n\n\t\t\tif (emailErrorCodes.includes(error.code)) {\n\t\t\t\tresponse.push({\n\t\t\t\t\ttype: 'email',\n\t\t\t\t\tmessage: error.message\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (passwordErrorCodes.includes(error.code)) {\n\t\t\t\tresponse.push({\n\t\t\t\t\ttype: 'password',\n\t\t\t\t\tmessage: error.message\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (error.code === 'auth/invalid-api-key') {\n\t\t\t\tdispatch(showMessage({ message: error.message }));\n\t\t\t}\n\n\t\t\treturn dispatch(loginError(response));\n\t\t});\n};\n\nconst initialState = {\n\tsuccess: false,\n\terrors: []\n};\n\nconst loginSlice = createSlice({\n\tname: 'auth/login',\n\tinitialState,\n\treducers: {\n\t\tloginSuccess: (state, action) => {\n\t\t\tstate.success = true;\n\t\t\tstate.errors = [];\n\t\t},\n\t\tloginError: (state, action) => {\n\t\t\tstate.success = false;\n\t\t\tstate.errors = action.payload;\n\t\t}\n\t},\n\textraReducers: {}\n});\n\nexport const { loginSuccess, loginError } = loginSlice.actions;\n\nexport default loginSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}
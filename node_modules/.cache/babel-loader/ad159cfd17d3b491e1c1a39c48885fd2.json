{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport { createUserSettingsFirebase, setUserData } from './userSlice';\nexport const submitRegister = ({\n  displayName,\n  password,\n  email\n}) => async dispatch => {\n  return jwtService.createUser({\n    displayName,\n    password,\n    email\n  }).then(user => {\n    dispatch(setUserData(user));\n    return dispatch(registerSuccess());\n  }).catch(errors => {\n    return dispatch(registerError(errors));\n  });\n};\nexport const registerWithFirebase = model => async dispatch => {\n  if (!firebaseService.auth) {\n    console.warn(\"Firebase Service didn't initialize, check your configuration\");\n    return () => false;\n  }\n\n  const {\n    email,\n    password,\n    displayName\n  } = model;\n  return firebaseService.auth.createUserWithEmailAndPassword(email, password).then(response => {\n    dispatch(createUserSettingsFirebase({ ...response.user,\n      displayName,\n      email\n    }));\n    return dispatch(registerSuccess());\n  }).catch(error => {\n    const usernameErrorCodes = ['auth/operation-not-allowed', 'auth/user-not-found', 'auth/user-disabled'];\n    const emailErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email'];\n    const passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n    const response = [];\n\n    if (usernameErrorCodes.includes(error.code)) {\n      response.push({\n        type: 'username',\n        message: error.message\n      });\n    }\n\n    if (emailErrorCodes.includes(error.code)) {\n      response.push({\n        type: 'email',\n        message: error.message\n      });\n    }\n\n    if (passwordErrorCodes.includes(error.code)) {\n      response.push({\n        type: 'password',\n        message: error.message\n      });\n    }\n\n    if (error.code === 'auth/invalid-api-key') {\n      dispatch(showMessage({\n        message: error.message\n      }));\n    }\n\n    return dispatch(registerError(response));\n  });\n};\nconst initialState = {\n  success: false,\n  errors: []\n};\nconst registerSlice = createSlice({\n  name: 'auth/register',\n  initialState,\n  reducers: {\n    registerSuccess: (state, action) => {\n      state.success = true;\n      state.errors = [];\n    },\n    registerError: (state, action) => {\n      state.success = false;\n      state.errors = action.payload;\n    }\n  },\n  extraReducers: {}\n});\nexport const {\n  registerSuccess,\n  registerError\n} = registerSlice.actions;\nexport default registerSlice.reducer;","map":{"version":3,"sources":["/Users/mozcan/Desktop/UK/gasbroker-front-end/src/app/auth/store/registerSlice.js"],"names":["createSlice","showMessage","firebaseService","jwtService","createUserSettingsFirebase","setUserData","submitRegister","displayName","password","email","dispatch","createUser","then","user","registerSuccess","catch","errors","registerError","registerWithFirebase","model","auth","console","warn","createUserWithEmailAndPassword","response","error","usernameErrorCodes","emailErrorCodes","passwordErrorCodes","includes","code","push","type","message","initialState","success","registerSlice","name","reducers","state","action","payload","extraReducers","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { showMessage } from 'app/store/fuse/messageSlice';\nimport firebaseService from 'app/services/firebaseService';\nimport jwtService from 'app/services/jwtService';\nimport { createUserSettingsFirebase, setUserData } from './userSlice';\n\nexport const submitRegister = ({ displayName, password, email }) => async dispatch => {\n\treturn jwtService\n\t\t.createUser({\n\t\t\tdisplayName,\n\t\t\tpassword,\n\t\t\temail\n\t\t})\n\t\t.then(user => {\n\t\t\tdispatch(setUserData(user));\n\t\t\treturn dispatch(registerSuccess());\n\t\t})\n\t\t.catch(errors => {\n\t\t\treturn dispatch(registerError(errors));\n\t\t});\n};\n\nexport const registerWithFirebase = model => async dispatch => {\n\tif (!firebaseService.auth) {\n\t\tconsole.warn(\"Firebase Service didn't initialize, check your configuration\");\n\n\t\treturn () => false;\n\t}\n\tconst { email, password, displayName } = model;\n\n\treturn firebaseService.auth\n\t\t.createUserWithEmailAndPassword(email, password)\n\t\t.then(response => {\n\t\t\tdispatch(\n\t\t\t\tcreateUserSettingsFirebase({\n\t\t\t\t\t...response.user,\n\t\t\t\t\tdisplayName,\n\t\t\t\t\temail\n\t\t\t\t})\n\t\t\t);\n\n\t\t\treturn dispatch(registerSuccess());\n\t\t})\n\t\t.catch(error => {\n\t\t\tconst usernameErrorCodes = ['auth/operation-not-allowed', 'auth/user-not-found', 'auth/user-disabled'];\n\n\t\t\tconst emailErrorCodes = ['auth/email-already-in-use', 'auth/invalid-email'];\n\n\t\t\tconst passwordErrorCodes = ['auth/weak-password', 'auth/wrong-password'];\n\n\t\t\tconst response = [];\n\n\t\t\tif (usernameErrorCodes.includes(error.code)) {\n\t\t\t\tresponse.push({\n\t\t\t\t\ttype: 'username',\n\t\t\t\t\tmessage: error.message\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (emailErrorCodes.includes(error.code)) {\n\t\t\t\tresponse.push({\n\t\t\t\t\ttype: 'email',\n\t\t\t\t\tmessage: error.message\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (passwordErrorCodes.includes(error.code)) {\n\t\t\t\tresponse.push({\n\t\t\t\t\ttype: 'password',\n\t\t\t\t\tmessage: error.message\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (error.code === 'auth/invalid-api-key') {\n\t\t\t\tdispatch(showMessage({ message: error.message }));\n\t\t\t}\n\n\t\t\treturn dispatch(registerError(response));\n\t\t});\n};\n\nconst initialState = {\n\tsuccess: false,\n\terrors: []\n};\n\nconst registerSlice = createSlice({\n\tname: 'auth/register',\n\tinitialState,\n\treducers: {\n\t\tregisterSuccess: (state, action) => {\n\t\t\tstate.success = true;\n\t\t\tstate.errors = [];\n\t\t},\n\t\tregisterError: (state, action) => {\n\t\t\tstate.success = false;\n\t\t\tstate.errors = action.payload;\n\t\t}\n\t},\n\textraReducers: {}\n});\n\nexport const { registerSuccess, registerError } = registerSlice.actions;\n\nexport default registerSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}